/**
 */
package org.scribble.scribble.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.scribble.scribble.util.ScribbleAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScribbleItemProviderAdapterFactory extends ScribbleAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScribbleItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.ScribbleProgram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScribbleProgramItemProvider scribbleProgramItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.ScribbleProgram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScribbleProgramAdapter() {
		if (scribbleProgramItemProvider == null) {
			scribbleProgramItemProvider = new ScribbleProgramItemProvider(this);
		}

		return scribbleProgramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.IncludeDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeDeclItemProvider includeDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.IncludeDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeDeclAdapter() {
		if (includeDeclItemProvider == null) {
			includeDeclItemProvider = new IncludeDeclItemProvider(this);
		}

		return includeDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.InstGlobalProtocolDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstGlobalProtocolDeclItemProvider instGlobalProtocolDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.InstGlobalProtocolDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstGlobalProtocolDeclAdapter() {
		if (instGlobalProtocolDeclItemProvider == null) {
			instGlobalProtocolDeclItemProvider = new InstGlobalProtocolDeclItemProvider(this);
		}

		return instGlobalProtocolDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.TypeDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclItemProvider typeDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.TypeDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDeclAdapter() {
		if (typeDeclItemProvider == null) {
			typeDeclItemProvider = new TypeDeclItemProvider(this);
		}

		return typeDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.GlobalProtocolDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalProtocolDeclItemProvider globalProtocolDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.GlobalProtocolDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalProtocolDeclAdapter() {
		if (globalProtocolDeclItemProvider == null) {
			globalProtocolDeclItemProvider = new GlobalProtocolDeclItemProvider(this);
		}

		return globalProtocolDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.GlobalInteractionBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalInteractionBlockItemProvider globalInteractionBlockItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.GlobalInteractionBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalInteractionBlockAdapter() {
		if (globalInteractionBlockItemProvider == null) {
			globalInteractionBlockItemProvider = new GlobalInteractionBlockItemProvider(this);
		}

		return globalInteractionBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.GlobalInteraction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalInteractionItemProvider globalInteractionItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.GlobalInteraction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalInteractionAdapter() {
		if (globalInteractionItemProvider == null) {
			globalInteractionItemProvider = new GlobalInteractionItemProvider(this);
		}

		return globalInteractionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Spawn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpawnItemProvider spawnItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Spawn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpawnAdapter() {
		if (spawnItemProvider == null) {
			spawnItemProvider = new SpawnItemProvider(this);
		}

		return spawnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Do} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoItemProvider doItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Do}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoAdapter() {
		if (doItemProvider == null) {
			doItemProvider = new DoItemProvider(this);
		}

		return doItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Interruptible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterruptibleItemProvider interruptibleItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Interruptible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterruptibleAdapter() {
		if (interruptibleItemProvider == null) {
			interruptibleItemProvider = new InterruptibleItemProvider(this);
		}

		return interruptibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Continue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinueItemProvider continueItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Continue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinueAdapter() {
		if (continueItemProvider == null) {
			continueItemProvider = new ContinueItemProvider(this);
		}

		return continueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Recursion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecursionItemProvider recursionItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Recursion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecursionAdapter() {
		if (recursionItemProvider == null) {
			recursionItemProvider = new RecursionItemProvider(this);
		}

		return recursionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Parallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelItemProvider parallelItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Parallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.MessageSignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageSignatureItemProvider messageSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.MessageSignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageSignatureAdapter() {
		if (messageSignatureItemProvider == null) {
			messageSignatureItemProvider = new MessageSignatureItemProvider(this);
		}

		return messageSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.scribble.scribble.PayloadType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PayloadTypeItemProvider payloadTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.scribble.scribble.PayloadType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPayloadTypeAdapter() {
		if (payloadTypeItemProvider == null) {
			payloadTypeItemProvider = new PayloadTypeItemProvider(this);
		}

		return payloadTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (scribbleProgramItemProvider != null) scribbleProgramItemProvider.dispose();
		if (includeDeclItemProvider != null) includeDeclItemProvider.dispose();
		if (instGlobalProtocolDeclItemProvider != null) instGlobalProtocolDeclItemProvider.dispose();
		if (typeDeclItemProvider != null) typeDeclItemProvider.dispose();
		if (globalProtocolDeclItemProvider != null) globalProtocolDeclItemProvider.dispose();
		if (globalInteractionBlockItemProvider != null) globalInteractionBlockItemProvider.dispose();
		if (globalInteractionItemProvider != null) globalInteractionItemProvider.dispose();
		if (spawnItemProvider != null) spawnItemProvider.dispose();
		if (doItemProvider != null) doItemProvider.dispose();
		if (interruptibleItemProvider != null) interruptibleItemProvider.dispose();
		if (continueItemProvider != null) continueItemProvider.dispose();
		if (recursionItemProvider != null) recursionItemProvider.dispose();
		if (parallelItemProvider != null) parallelItemProvider.dispose();
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (messageSignatureItemProvider != null) messageSignatureItemProvider.dispose();
		if (payloadTypeItemProvider != null) payloadTypeItemProvider.dispose();
	}

}
