/*
* generated by Xtext
*/

package org.scribble.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ScribbleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScribbleProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScribbleProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludeDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludeDeclIncludeDeclParserRuleCall_0_0 = (RuleCall)cIncludeDeclAssignment_0.eContents().get(0);
		private final Assignment cTypeDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDeclTypeDeclParserRuleCall_1_0 = (RuleCall)cTypeDeclAssignment_1.eContents().get(0);
		private final Assignment cGlobalProtocolDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobalProtocolDeclGlobalProtocolDeclParserRuleCall_2_0 = (RuleCall)cGlobalProtocolDeclAssignment_2.eContents().get(0);
		private final Assignment cInstGlobalProtocolDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstGlobalProtocolDeclInstGlobalProtocolDeclParserRuleCall_3_0 = (RuleCall)cInstGlobalProtocolDeclAssignment_3.eContents().get(0);
		
		//ScribbleProgram:
		//
		//	includeDecl+=IncludeDecl* typeDecl+=TypeDecl* globalProtocolDecl+=GlobalProtocolDecl+
		//
		//	instGlobalProtocolDecl+=InstGlobalProtocolDecl*;
		public ParserRule getRule() { return rule; }

		//includeDecl+=IncludeDecl* typeDecl+=TypeDecl* globalProtocolDecl+=GlobalProtocolDecl+
		//
		//instGlobalProtocolDecl+=InstGlobalProtocolDecl*
		public Group getGroup() { return cGroup; }

		//includeDecl+=IncludeDecl*
		public Assignment getIncludeDeclAssignment_0() { return cIncludeDeclAssignment_0; }

		//IncludeDecl
		public RuleCall getIncludeDeclIncludeDeclParserRuleCall_0_0() { return cIncludeDeclIncludeDeclParserRuleCall_0_0; }

		//typeDecl+=TypeDecl*
		public Assignment getTypeDeclAssignment_1() { return cTypeDeclAssignment_1; }

		//TypeDecl
		public RuleCall getTypeDeclTypeDeclParserRuleCall_1_0() { return cTypeDeclTypeDeclParserRuleCall_1_0; }

		//globalProtocolDecl+=GlobalProtocolDecl+
		public Assignment getGlobalProtocolDeclAssignment_2() { return cGlobalProtocolDeclAssignment_2; }

		//GlobalProtocolDecl
		public RuleCall getGlobalProtocolDeclGlobalProtocolDeclParserRuleCall_2_0() { return cGlobalProtocolDeclGlobalProtocolDeclParserRuleCall_2_0; }

		//instGlobalProtocolDecl+=InstGlobalProtocolDecl*
		public Assignment getInstGlobalProtocolDeclAssignment_3() { return cInstGlobalProtocolDeclAssignment_3; }

		//InstGlobalProtocolDecl
		public RuleCall getInstGlobalProtocolDeclInstGlobalProtocolDeclParserRuleCall_3_0() { return cInstGlobalProtocolDeclInstGlobalProtocolDeclParserRuleCall_3_0; }
	}

	public class IncludeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IncludeDecl:
		//
		//	"include" importURI=STRING SEMI;
		public ParserRule getRule() { return rule; }

		//"include" importURI=STRING SEMI
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_2() { return cSEMITerminalRuleCall_2; }
	}

	public class InstGlobalProtocolDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstGlobalProtocolDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolNameIDTerminalRuleCall_2_0 = (RuleCall)cProtocolNameAssignment_2.eContents().get(0);
		private final RuleCall cLPATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRolesIDTerminalRuleCall_5_0 = (RuleCall)cRolesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cRoleKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRolesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRolesIDTerminalRuleCall_6_2_0 = (RuleCall)cRolesAssignment_6_2.eContents().get(0);
		private final RuleCall cRPATerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cInstantiatesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cInstantiatedProtocolAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInstantiatedProtocolIDTerminalRuleCall_9_0 = (RuleCall)cInstantiatedProtocolAssignment_9.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//InstGlobalProtocolDecl:
		//
		//	"global" "protocol" protocolName=ID LPA "role" roles+=ID (COMMA "role" roles+=ID)* RPA "instantiates"
		//
		//	instantiatedProtocol=ID SEMI;
		public ParserRule getRule() { return rule; }

		//"global" "protocol" protocolName=ID LPA "role" roles+=ID (COMMA "role" roles+=ID)* RPA "instantiates"
		//
		//instantiatedProtocol=ID SEMI
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//"protocol"
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }

		//protocolName=ID
		public Assignment getProtocolNameAssignment_2() { return cProtocolNameAssignment_2; }

		//ID
		public RuleCall getProtocolNameIDTerminalRuleCall_2_0() { return cProtocolNameIDTerminalRuleCall_2_0; }

		//LPA
		public RuleCall getLPATerminalRuleCall_3() { return cLPATerminalRuleCall_3; }

		//"role"
		public Keyword getRoleKeyword_4() { return cRoleKeyword_4; }

		//roles+=ID
		public Assignment getRolesAssignment_5() { return cRolesAssignment_5; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_5_0() { return cRolesIDTerminalRuleCall_5_0; }

		//(COMMA "role" roles+=ID)*
		public Group getGroup_6() { return cGroup_6; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_6_0() { return cCOMMATerminalRuleCall_6_0; }

		//"role"
		public Keyword getRoleKeyword_6_1() { return cRoleKeyword_6_1; }

		//roles+=ID
		public Assignment getRolesAssignment_6_2() { return cRolesAssignment_6_2; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_6_2_0() { return cRolesIDTerminalRuleCall_6_2_0; }

		//RPA
		public RuleCall getRPATerminalRuleCall_7() { return cRPATerminalRuleCall_7; }

		//"instantiates"
		public Keyword getInstantiatesKeyword_8() { return cInstantiatesKeyword_8; }

		//instantiatedProtocol=ID
		public Assignment getInstantiatedProtocolAssignment_9() { return cInstantiatedProtocolAssignment_9; }

		//ID
		public RuleCall getInstantiatedProtocolIDTerminalRuleCall_9_0() { return cInstantiatedProtocolIDTerminalRuleCall_9_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_10() { return cSEMITerminalRuleCall_10; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameIDTerminalRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSchemaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSchemaIDTerminalRuleCall_4_0 = (RuleCall)cSchemaAssignment_4.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFileAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFileIDTerminalRuleCall_6_0 = (RuleCall)cFileAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAliasAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_7_1_0 = (RuleCall)cAliasAssignment_7_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//TypeDecl:
		//
		//	"import" typeName=ID "from" LT schema=ID GT file=ID ("as" alias=ID)? SEMI;
		public ParserRule getRule() { return rule; }

		//"import" typeName=ID "from" LT schema=ID GT file=ID ("as" alias=ID)? SEMI
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//typeName=ID
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_1_0() { return cTypeNameIDTerminalRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//LT
		public RuleCall getLTTerminalRuleCall_3() { return cLTTerminalRuleCall_3; }

		//schema=ID
		public Assignment getSchemaAssignment_4() { return cSchemaAssignment_4; }

		//ID
		public RuleCall getSchemaIDTerminalRuleCall_4_0() { return cSchemaIDTerminalRuleCall_4_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_5() { return cGTTerminalRuleCall_5; }

		//file=ID
		public Assignment getFileAssignment_6() { return cFileAssignment_6; }

		//ID
		public RuleCall getFileIDTerminalRuleCall_6_0() { return cFileIDTerminalRuleCall_6_0; }

		//("as" alias=ID)?
		public Group getGroup_7() { return cGroup_7; }

		//"as"
		public Keyword getAsKeyword_7_0() { return cAsKeyword_7_0; }

		//alias=ID
		public Assignment getAliasAssignment_7_1() { return cAliasAssignment_7_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_7_1_0() { return cAliasIDTerminalRuleCall_7_1_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_8() { return cSEMITerminalRuleCall_8; }
	}

	public class GlobalProtocolDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalProtocolDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolNameIDTerminalRuleCall_2_0 = (RuleCall)cProtocolNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSigKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParametersIDTerminalRuleCall_3_2_0 = (RuleCall)cParametersAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final Keyword cSigKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cParametersIDTerminalRuleCall_3_3_2_0 = (RuleCall)cParametersAssignment_3_3_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final RuleCall cLPATerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRoleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRolesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRolesIDTerminalRuleCall_5_1_0 = (RuleCall)cRolesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_5_2_0 = (RuleCall)cGroup_5_2.eContents().get(0);
		private final Keyword cRoleKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cRolesAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cRolesIDTerminalRuleCall_5_2_2_0 = (RuleCall)cRolesAssignment_5_2_2.eContents().get(0);
		private final RuleCall cRPATerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyGlobalInteractionBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//GlobalProtocolDecl:
		//
		//	"global" "protocol" protocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA ("role" roles+=ID
		//
		//	(COMMA "role" roles+=ID)*)? RPA body=GlobalInteractionBlock;
		public ParserRule getRule() { return rule; }

		//"global" "protocol" protocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA ("role" roles+=ID
		//
		//(COMMA "role" roles+=ID)*)? RPA body=GlobalInteractionBlock
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//"protocol"
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }

		//protocolName=ID
		public Assignment getProtocolNameAssignment_2() { return cProtocolNameAssignment_2; }

		//ID
		public RuleCall getProtocolNameIDTerminalRuleCall_2_0() { return cProtocolNameIDTerminalRuleCall_2_0; }

		//(LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)?
		public Group getGroup_3() { return cGroup_3; }

		//LT
		public RuleCall getLTTerminalRuleCall_3_0() { return cLTTerminalRuleCall_3_0; }

		//"sig"
		public Keyword getSigKeyword_3_1() { return cSigKeyword_3_1; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_2() { return cParametersAssignment_3_2; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_2_0() { return cParametersIDTerminalRuleCall_3_2_0; }

		//(COMMA "sig" parameters+=ID)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_3_0() { return cCOMMATerminalRuleCall_3_3_0; }

		//"sig"
		public Keyword getSigKeyword_3_3_1() { return cSigKeyword_3_3_1; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_3_2() { return cParametersAssignment_3_3_2; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_3_2_0() { return cParametersIDTerminalRuleCall_3_3_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_4() { return cGTTerminalRuleCall_3_4; }

		//LPA
		public RuleCall getLPATerminalRuleCall_4() { return cLPATerminalRuleCall_4; }

		//("role" roles+=ID (COMMA "role" roles+=ID)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"role"
		public Keyword getRoleKeyword_5_0() { return cRoleKeyword_5_0; }

		//roles+=ID
		public Assignment getRolesAssignment_5_1() { return cRolesAssignment_5_1; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_5_1_0() { return cRolesIDTerminalRuleCall_5_1_0; }

		//(COMMA "role" roles+=ID)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_5_2_0() { return cCOMMATerminalRuleCall_5_2_0; }

		//"role"
		public Keyword getRoleKeyword_5_2_1() { return cRoleKeyword_5_2_1; }

		//roles+=ID
		public Assignment getRolesAssignment_5_2_2() { return cRolesAssignment_5_2_2; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_5_2_2_0() { return cRolesIDTerminalRuleCall_5_2_2_0; }

		//RPA
		public RuleCall getRPATerminalRuleCall_6() { return cRPATerminalRuleCall_6; }

		//body=GlobalInteractionBlock
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//GlobalInteractionBlock
		public RuleCall getBodyGlobalInteractionBlockParserRuleCall_7_0() { return cBodyGlobalInteractionBlockParserRuleCall_7_0; }
	}

	public class GlobalInteractionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalInteractionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCBTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cInteractionsequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInteractionsequenceGlobalInteractionParserRuleCall_1_0 = (RuleCall)cInteractionsequenceAssignment_1.eContents().get(0);
		private final RuleCall cRCBTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//GlobalInteractionBlock:
		//
		//	LCB interactionsequence+=GlobalInteraction+ RCB;
		public ParserRule getRule() { return rule; }

		//LCB interactionsequence+=GlobalInteraction+ RCB
		public Group getGroup() { return cGroup; }

		//LCB
		public RuleCall getLCBTerminalRuleCall_0() { return cLCBTerminalRuleCall_0; }

		//interactionsequence+=GlobalInteraction+
		public Assignment getInteractionsequenceAssignment_1() { return cInteractionsequenceAssignment_1; }

		//GlobalInteraction
		public RuleCall getInteractionsequenceGlobalInteractionParserRuleCall_1_0() { return cInteractionsequenceGlobalInteractionParserRuleCall_1_0; }

		//RCB
		public RuleCall getRCBTerminalRuleCall_2() { return cRCBTerminalRuleCall_2; }
	}

	public class GlobalInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalInteraction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChoiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecursionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cContinueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInterruptibleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSpawnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//GlobalInteraction:
		//
		//	Message | Choice | Parallel | Recursion | Continue | Interruptible | Do | Spawn;
		public ParserRule getRule() { return rule; }

		//Message | Choice | Parallel | Recursion | Continue | Interruptible | Do | Spawn
		public Alternatives getAlternatives() { return cAlternatives; }

		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }

		//Choice
		public RuleCall getChoiceParserRuleCall_1() { return cChoiceParserRuleCall_1; }

		//Parallel
		public RuleCall getParallelParserRuleCall_2() { return cParallelParserRuleCall_2; }

		//Recursion
		public RuleCall getRecursionParserRuleCall_3() { return cRecursionParserRuleCall_3; }

		//Continue
		public RuleCall getContinueParserRuleCall_4() { return cContinueParserRuleCall_4; }

		//Interruptible
		public RuleCall getInterruptibleParserRuleCall_5() { return cInterruptibleParserRuleCall_5; }

		//Do
		public RuleCall getDoParserRuleCall_6() { return cDoParserRuleCall_6; }

		//Spawn
		public RuleCall getSpawnParserRuleCall_7() { return cSpawnParserRuleCall_7; }
	}

	public class SpawnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spawn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoleNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRoleNameIDTerminalRuleCall_0_0 = (RuleCall)cRoleNameAssignment_0.eContents().get(0);
		private final Keyword cSpawnsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetProtocolNameIDTerminalRuleCall_2_0 = (RuleCall)cTargetProtocolNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSigKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParametersIDTerminalRuleCall_3_2_0 = (RuleCall)cParametersAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final Keyword cSigKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cParametersIDTerminalRuleCall_3_3_2_0 = (RuleCall)cParametersAssignment_3_3_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final RuleCall cLPATerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cCurrentRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCurrentRolesIDTerminalRuleCall_5_0 = (RuleCall)cCurrentRolesAssignment_5.eContents().get(0);
		private final Keyword cAsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetRolesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetRolesIDTerminalRuleCall_7_0 = (RuleCall)cTargetRolesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cCOMMATerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Assignment cCurrentRolesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cCurrentRolesIDTerminalRuleCall_8_1_0 = (RuleCall)cCurrentRolesAssignment_8_1.eContents().get(0);
		private final Keyword cAsKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cTargetRolesAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cTargetRolesIDTerminalRuleCall_8_3_0 = (RuleCall)cTargetRolesAssignment_8_3.eContents().get(0);
		private final RuleCall cRPATerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cSEMITerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Spawn:
		//
		//	roleName=ID "spawns" targetProtocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA
		//
		//	currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI;
		public ParserRule getRule() { return rule; }

		//roleName=ID "spawns" targetProtocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA
		//
		//currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI
		public Group getGroup() { return cGroup; }

		//roleName=ID
		public Assignment getRoleNameAssignment_0() { return cRoleNameAssignment_0; }

		//ID
		public RuleCall getRoleNameIDTerminalRuleCall_0_0() { return cRoleNameIDTerminalRuleCall_0_0; }

		//"spawns"
		public Keyword getSpawnsKeyword_1() { return cSpawnsKeyword_1; }

		//targetProtocolName=ID
		public Assignment getTargetProtocolNameAssignment_2() { return cTargetProtocolNameAssignment_2; }

		//ID
		public RuleCall getTargetProtocolNameIDTerminalRuleCall_2_0() { return cTargetProtocolNameIDTerminalRuleCall_2_0; }

		//(LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)?
		public Group getGroup_3() { return cGroup_3; }

		//LT
		public RuleCall getLTTerminalRuleCall_3_0() { return cLTTerminalRuleCall_3_0; }

		//"sig"
		public Keyword getSigKeyword_3_1() { return cSigKeyword_3_1; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_2() { return cParametersAssignment_3_2; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_2_0() { return cParametersIDTerminalRuleCall_3_2_0; }

		//(COMMA "sig" parameters+=ID)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_3_0() { return cCOMMATerminalRuleCall_3_3_0; }

		//"sig"
		public Keyword getSigKeyword_3_3_1() { return cSigKeyword_3_3_1; }

		//parameters+=ID
		public Assignment getParametersAssignment_3_3_2() { return cParametersAssignment_3_3_2; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_3_2_0() { return cParametersIDTerminalRuleCall_3_3_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_4() { return cGTTerminalRuleCall_3_4; }

		//LPA
		public RuleCall getLPATerminalRuleCall_4() { return cLPATerminalRuleCall_4; }

		//currentRoles+=ID
		public Assignment getCurrentRolesAssignment_5() { return cCurrentRolesAssignment_5; }

		//ID
		public RuleCall getCurrentRolesIDTerminalRuleCall_5_0() { return cCurrentRolesIDTerminalRuleCall_5_0; }

		//"as"
		public Keyword getAsKeyword_6() { return cAsKeyword_6; }

		//targetRoles+=ID
		public Assignment getTargetRolesAssignment_7() { return cTargetRolesAssignment_7; }

		//ID
		public RuleCall getTargetRolesIDTerminalRuleCall_7_0() { return cTargetRolesIDTerminalRuleCall_7_0; }

		//(COMMA currentRoles+=ID "as" targetRoles+=ID)*
		public Group getGroup_8() { return cGroup_8; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_8_0() { return cCOMMATerminalRuleCall_8_0; }

		//currentRoles+=ID
		public Assignment getCurrentRolesAssignment_8_1() { return cCurrentRolesAssignment_8_1; }

		//ID
		public RuleCall getCurrentRolesIDTerminalRuleCall_8_1_0() { return cCurrentRolesIDTerminalRuleCall_8_1_0; }

		//"as"
		public Keyword getAsKeyword_8_2() { return cAsKeyword_8_2; }

		//targetRoles+=ID
		public Assignment getTargetRolesAssignment_8_3() { return cTargetRolesAssignment_8_3; }

		//ID
		public RuleCall getTargetRolesIDTerminalRuleCall_8_3_0() { return cTargetRolesIDTerminalRuleCall_8_3_0; }

		//RPA
		public RuleCall getRPATerminalRuleCall_9() { return cRPATerminalRuleCall_9; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_10() { return cSEMITerminalRuleCall_10; }
	}

	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetProtocolNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetProtocolNameIDTerminalRuleCall_1_0 = (RuleCall)cTargetProtocolNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cLTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsMessageSignatureParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsMessageSignatureParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final RuleCall cLPATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cCurrentRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCurrentRolesIDTerminalRuleCall_4_0 = (RuleCall)cCurrentRolesAssignment_4.eContents().get(0);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetRolesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetRolesIDTerminalRuleCall_6_0 = (RuleCall)cTargetRolesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cCurrentRolesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCurrentRolesIDTerminalRuleCall_7_1_0 = (RuleCall)cCurrentRolesAssignment_7_1.eContents().get(0);
		private final Keyword cAsKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cTargetRolesAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cTargetRolesIDTerminalRuleCall_7_3_0 = (RuleCall)cTargetRolesAssignment_7_3.eContents().get(0);
		private final RuleCall cRPATerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Do:
		//
		//	"do" targetProtocolName=ID (LT arguments+=MessageSignature (COMMA arguments+=MessageSignature)* GT)? LPA
		//
		//	currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI;
		public ParserRule getRule() { return rule; }

		//"do" targetProtocolName=ID (LT arguments+=MessageSignature (COMMA arguments+=MessageSignature)* GT)? LPA
		//
		//currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//targetProtocolName=ID
		public Assignment getTargetProtocolNameAssignment_1() { return cTargetProtocolNameAssignment_1; }

		//ID
		public RuleCall getTargetProtocolNameIDTerminalRuleCall_1_0() { return cTargetProtocolNameIDTerminalRuleCall_1_0; }

		//(LT arguments+=MessageSignature (COMMA arguments+=MessageSignature)* GT)?
		public Group getGroup_2() { return cGroup_2; }

		//LT
		public RuleCall getLTTerminalRuleCall_2_0() { return cLTTerminalRuleCall_2_0; }

		//arguments+=MessageSignature
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//MessageSignature
		public RuleCall getArgumentsMessageSignatureParserRuleCall_2_1_0() { return cArgumentsMessageSignatureParserRuleCall_2_1_0; }

		//(COMMA arguments+=MessageSignature)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_2_0() { return cCOMMATerminalRuleCall_2_2_0; }

		//arguments+=MessageSignature
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//MessageSignature
		public RuleCall getArgumentsMessageSignatureParserRuleCall_2_2_1_0() { return cArgumentsMessageSignatureParserRuleCall_2_2_1_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_3() { return cGTTerminalRuleCall_2_3; }

		//LPA
		public RuleCall getLPATerminalRuleCall_3() { return cLPATerminalRuleCall_3; }

		//currentRoles+=ID
		public Assignment getCurrentRolesAssignment_4() { return cCurrentRolesAssignment_4; }

		//ID
		public RuleCall getCurrentRolesIDTerminalRuleCall_4_0() { return cCurrentRolesIDTerminalRuleCall_4_0; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//targetRoles+=ID
		public Assignment getTargetRolesAssignment_6() { return cTargetRolesAssignment_6; }

		//ID
		public RuleCall getTargetRolesIDTerminalRuleCall_6_0() { return cTargetRolesIDTerminalRuleCall_6_0; }

		//(COMMA currentRoles+=ID "as" targetRoles+=ID)*
		public Group getGroup_7() { return cGroup_7; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7_0() { return cCOMMATerminalRuleCall_7_0; }

		//currentRoles+=ID
		public Assignment getCurrentRolesAssignment_7_1() { return cCurrentRolesAssignment_7_1; }

		//ID
		public RuleCall getCurrentRolesIDTerminalRuleCall_7_1_0() { return cCurrentRolesIDTerminalRuleCall_7_1_0; }

		//"as"
		public Keyword getAsKeyword_7_2() { return cAsKeyword_7_2; }

		//targetRoles+=ID
		public Assignment getTargetRolesAssignment_7_3() { return cTargetRolesAssignment_7_3; }

		//ID
		public RuleCall getTargetRolesIDTerminalRuleCall_7_3_0() { return cTargetRolesIDTerminalRuleCall_7_3_0; }

		//RPA
		public RuleCall getRPATerminalRuleCall_8() { return cRPATerminalRuleCall_8; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
	}

	public class InterruptibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interruptible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterruptibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyGlobalInteractionBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoleNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRoleNamesIDTerminalRuleCall_3_0 = (RuleCall)cRoleNamesAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSignaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSignaturesMessageSignatureParserRuleCall_5_0 = (RuleCall)cSignaturesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cCOMMATerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cByKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRoleNamesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRoleNamesIDTerminalRuleCall_6_2_0 = (RuleCall)cRoleNamesAssignment_6_2.eContents().get(0);
		private final Keyword cWithKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cSignaturesAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cSignaturesMessageSignatureParserRuleCall_6_4_0 = (RuleCall)cSignaturesAssignment_6_4.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Interruptible:
		//
		//	"interruptible" body=GlobalInteractionBlock "by" roleNames+=ID "with" signatures+=MessageSignature (COMMA "by"
		//
		//	roleNames+=ID "with" signatures+=MessageSignature)* //by role-name with message-signature  ( , by role-name with message-signature )* ;
		//
		//	SEMI;
		public ParserRule getRule() { return rule; }

		//"interruptible" body=GlobalInteractionBlock "by" roleNames+=ID "with" signatures+=MessageSignature (COMMA "by"
		//
		//roleNames+=ID "with" signatures+=MessageSignature)* //by role-name with message-signature  ( , by role-name with message-signature )* ;
		//
		//SEMI
		public Group getGroup() { return cGroup; }

		//"interruptible"
		public Keyword getInterruptibleKeyword_0() { return cInterruptibleKeyword_0; }

		//body=GlobalInteractionBlock
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//GlobalInteractionBlock
		public RuleCall getBodyGlobalInteractionBlockParserRuleCall_1_0() { return cBodyGlobalInteractionBlockParserRuleCall_1_0; }

		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }

		//roleNames+=ID
		public Assignment getRoleNamesAssignment_3() { return cRoleNamesAssignment_3; }

		//ID
		public RuleCall getRoleNamesIDTerminalRuleCall_3_0() { return cRoleNamesIDTerminalRuleCall_3_0; }

		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }

		//signatures+=MessageSignature
		public Assignment getSignaturesAssignment_5() { return cSignaturesAssignment_5; }

		//MessageSignature
		public RuleCall getSignaturesMessageSignatureParserRuleCall_5_0() { return cSignaturesMessageSignatureParserRuleCall_5_0; }

		//(COMMA "by" roleNames+=ID "with" signatures+=MessageSignature)*
		public Group getGroup_6() { return cGroup_6; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_6_0() { return cCOMMATerminalRuleCall_6_0; }

		//"by"
		public Keyword getByKeyword_6_1() { return cByKeyword_6_1; }

		//roleNames+=ID
		public Assignment getRoleNamesAssignment_6_2() { return cRoleNamesAssignment_6_2; }

		//ID
		public RuleCall getRoleNamesIDTerminalRuleCall_6_2_0() { return cRoleNamesIDTerminalRuleCall_6_2_0; }

		//"with"
		public Keyword getWithKeyword_6_3() { return cWithKeyword_6_3; }

		//signatures+=MessageSignature
		public Assignment getSignaturesAssignment_6_4() { return cSignaturesAssignment_6_4; }

		//MessageSignature
		public RuleCall getSignaturesMessageSignatureParserRuleCall_6_4_0() { return cSignaturesMessageSignatureParserRuleCall_6_4_0; }

		////by role-name with message-signature  ( , by role-name with message-signature )* ;
		//
		//SEMI
		public RuleCall getSEMITerminalRuleCall_7() { return cSEMITerminalRuleCall_7; }
	}

	public class ContinueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Continue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopNameIDTerminalRuleCall_1_0 = (RuleCall)cLoopNameAssignment_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Continue:
		//
		//	"continue" loopName=ID SEMI;
		public ParserRule getRule() { return rule; }

		//"continue" loopName=ID SEMI
		public Group getGroup() { return cGroup; }

		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }

		//loopName=ID
		public Assignment getLoopNameAssignment_1() { return cLoopNameAssignment_1; }

		//ID
		public RuleCall getLoopNameIDTerminalRuleCall_1_0() { return cLoopNameIDTerminalRuleCall_1_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_2() { return cSEMITerminalRuleCall_2; }
	}

	public class RecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopNameIDTerminalRuleCall_1_0 = (RuleCall)cLoopNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyGlobalInteractionBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Recursion:
		//
		//	"rec" loopName=ID body=GlobalInteractionBlock;
		public ParserRule getRule() { return rule; }

		//"rec" loopName=ID body=GlobalInteractionBlock
		public Group getGroup() { return cGroup; }

		//"rec"
		public Keyword getRecKeyword_0() { return cRecKeyword_0; }

		//loopName=ID
		public Assignment getLoopNameAssignment_1() { return cLoopNameAssignment_1; }

		//ID
		public RuleCall getLoopNameIDTerminalRuleCall_1_0() { return cLoopNameIDTerminalRuleCall_1_0; }

		//body=GlobalInteractionBlock
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//GlobalInteractionBlock
		public RuleCall getBodyGlobalInteractionBlockParserRuleCall_2_0() { return cBodyGlobalInteractionBlockParserRuleCall_2_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBranchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBranchesGlobalInteractionBlockParserRuleCall_1_0 = (RuleCall)cBranchesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBranchesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBranchesGlobalInteractionBlockParserRuleCall_2_1_0 = (RuleCall)cBranchesAssignment_2_1.eContents().get(0);
		
		//Parallel:
		//
		//	"parallel" branches+=GlobalInteractionBlock ("and" branches+=GlobalInteractionBlock)*;
		public ParserRule getRule() { return rule; }

		//"parallel" branches+=GlobalInteractionBlock ("and" branches+=GlobalInteractionBlock)*
		public Group getGroup() { return cGroup; }

		//"parallel"
		public Keyword getParallelKeyword_0() { return cParallelKeyword_0; }

		//branches+=GlobalInteractionBlock
		public Assignment getBranchesAssignment_1() { return cBranchesAssignment_1; }

		//GlobalInteractionBlock
		public RuleCall getBranchesGlobalInteractionBlockParserRuleCall_1_0() { return cBranchesGlobalInteractionBlockParserRuleCall_1_0; }

		//("and" branches+=GlobalInteractionBlock)*
		public Group getGroup_2() { return cGroup_2; }

		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }

		//branches+=GlobalInteractionBlock
		public Assignment getBranchesAssignment_2_1() { return cBranchesAssignment_2_1; }

		//GlobalInteractionBlock
		public RuleCall getBranchesGlobalInteractionBlockParserRuleCall_2_1_0() { return cBranchesGlobalInteractionBlockParserRuleCall_2_1_0; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleIDTerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		private final Assignment cBranchesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBranchesGlobalInteractionBlockParserRuleCall_3_0 = (RuleCall)cBranchesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBranchesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBranchesGlobalInteractionBlockParserRuleCall_4_1_0 = (RuleCall)cBranchesAssignment_4_1.eContents().get(0);
		
		//Choice:
		//
		//	"choice" "at" role=ID branches+=GlobalInteractionBlock ("or" branches+=GlobalInteractionBlock)*;
		public ParserRule getRule() { return rule; }

		//"choice" "at" role=ID branches+=GlobalInteractionBlock ("or" branches+=GlobalInteractionBlock)*
		public Group getGroup() { return cGroup; }

		//"choice"
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//role=ID
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_0() { return cRoleIDTerminalRuleCall_2_0; }

		//branches+=GlobalInteractionBlock
		public Assignment getBranchesAssignment_3() { return cBranchesAssignment_3; }

		//GlobalInteractionBlock
		public RuleCall getBranchesGlobalInteractionBlockParserRuleCall_3_0() { return cBranchesGlobalInteractionBlockParserRuleCall_3_0; }

		//("or" branches+=GlobalInteractionBlock)*
		public Group getGroup_4() { return cGroup_4; }

		//"or"
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }

		//branches+=GlobalInteractionBlock
		public Assignment getBranchesAssignment_4_1() { return cBranchesAssignment_4_1; }

		//GlobalInteractionBlock
		public RuleCall getBranchesGlobalInteractionBlockParserRuleCall_4_1_0() { return cBranchesGlobalInteractionBlockParserRuleCall_4_1_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureMessageSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSenderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSenderIDTerminalRuleCall_2_0 = (RuleCall)cSenderAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReceiverAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReceiverIDTerminalRuleCall_4_0 = (RuleCall)cReceiverAssignment_4.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Message:
		//
		//	signature=MessageSignature "from" sender=ID "to" receiver=ID SEMI;
		public ParserRule getRule() { return rule; }

		//signature=MessageSignature "from" sender=ID "to" receiver=ID SEMI
		public Group getGroup() { return cGroup; }

		//signature=MessageSignature
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }

		//MessageSignature
		public RuleCall getSignatureMessageSignatureParserRuleCall_0_0() { return cSignatureMessageSignatureParserRuleCall_0_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//sender=ID
		public Assignment getSenderAssignment_2() { return cSenderAssignment_2; }

		//ID
		public RuleCall getSenderIDTerminalRuleCall_2_0() { return cSenderIDTerminalRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//receiver=ID
		public Assignment getReceiverAssignment_4() { return cReceiverAssignment_4; }

		//ID
		public RuleCall getReceiverIDTerminalRuleCall_4_0() { return cReceiverIDTerminalRuleCall_4_0; }

		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
	}

	public class MessageSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorIDTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final RuleCall cLPATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPayloadTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPayloadTypesPayloadTypeParserRuleCall_2_0_0 = (RuleCall)cPayloadTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cPayloadTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPayloadTypesPayloadTypeParserRuleCall_2_1_1_0 = (RuleCall)cPayloadTypesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRPATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MessageSignature:
		//
		//	operator=ID LPA (payloadTypes+=PayloadType (COMMA payloadTypes+=PayloadType)*)? RPA;
		public ParserRule getRule() { return rule; }

		//operator=ID LPA (payloadTypes+=PayloadType (COMMA payloadTypes+=PayloadType)*)? RPA
		public Group getGroup() { return cGroup; }

		//operator=ID
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//ID
		public RuleCall getOperatorIDTerminalRuleCall_0_0() { return cOperatorIDTerminalRuleCall_0_0; }

		//LPA
		public RuleCall getLPATerminalRuleCall_1() { return cLPATerminalRuleCall_1; }

		//(payloadTypes+=PayloadType (COMMA payloadTypes+=PayloadType)*)?
		public Group getGroup_2() { return cGroup_2; }

		//payloadTypes+=PayloadType
		public Assignment getPayloadTypesAssignment_2_0() { return cPayloadTypesAssignment_2_0; }

		//PayloadType
		public RuleCall getPayloadTypesPayloadTypeParserRuleCall_2_0_0() { return cPayloadTypesPayloadTypeParserRuleCall_2_0_0; }

		//(COMMA payloadTypes+=PayloadType)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_0() { return cCOMMATerminalRuleCall_2_1_0; }

		//payloadTypes+=PayloadType
		public Assignment getPayloadTypesAssignment_2_1_1() { return cPayloadTypesAssignment_2_1_1; }

		//PayloadType
		public RuleCall getPayloadTypesPayloadTypeParserRuleCall_2_1_1_0() { return cPayloadTypesPayloadTypeParserRuleCall_2_1_1_0; }

		//RPA
		public RuleCall getRPATerminalRuleCall_3() { return cRPATerminalRuleCall_3; }
	}

	public class PayloadTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PayloadType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPayloadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPayloadIDTerminalRuleCall_0_0 = (RuleCall)cPayloadAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeIDTerminalRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		
		//PayloadType:
		//
		//	payload=ID dataType=ID?;
		public ParserRule getRule() { return rule; }

		//payload=ID dataType=ID?
		public Group getGroup() { return cGroup; }

		//payload=ID
		public Assignment getPayloadAssignment_0() { return cPayloadAssignment_0; }

		//ID
		public RuleCall getPayloadIDTerminalRuleCall_0_0() { return cPayloadIDTerminalRuleCall_0_0; }

		//dataType=ID?
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//ID
		public RuleCall getDataTypeIDTerminalRuleCall_1_0() { return cDataTypeIDTerminalRuleCall_1_0; }
	}
	
	
	private ScribbleProgramElements pScribbleProgram;
	private IncludeDeclElements pIncludeDecl;
	private InstGlobalProtocolDeclElements pInstGlobalProtocolDecl;
	private TypeDeclElements pTypeDecl;
	private GlobalProtocolDeclElements pGlobalProtocolDecl;
	private GlobalInteractionBlockElements pGlobalInteractionBlock;
	private GlobalInteractionElements pGlobalInteraction;
	private SpawnElements pSpawn;
	private DoElements pDo;
	private InterruptibleElements pInterruptible;
	private ContinueElements pContinue;
	private RecursionElements pRecursion;
	private ParallelElements pParallel;
	private ChoiceElements pChoice;
	private MessageElements pMessage;
	private MessageSignatureElements pMessageSignature;
	private PayloadTypeElements pPayloadType;
	private TerminalRule tLCB;
	private TerminalRule tRCB;
	private TerminalRule tLPA;
	private TerminalRule tRPA;
	private TerminalRule tSEMI;
	private TerminalRule tCOLON;
	private TerminalRule tCOMMA;
	private TerminalRule tGT;
	private TerminalRule tLT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScribbleGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.scribble.Scribble".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ScribbleProgram:
	//
	//	includeDecl+=IncludeDecl* typeDecl+=TypeDecl* globalProtocolDecl+=GlobalProtocolDecl+
	//
	//	instGlobalProtocolDecl+=InstGlobalProtocolDecl*;
	public ScribbleProgramElements getScribbleProgramAccess() {
		return (pScribbleProgram != null) ? pScribbleProgram : (pScribbleProgram = new ScribbleProgramElements());
	}
	
	public ParserRule getScribbleProgramRule() {
		return getScribbleProgramAccess().getRule();
	}

	//IncludeDecl:
	//
	//	"include" importURI=STRING SEMI;
	public IncludeDeclElements getIncludeDeclAccess() {
		return (pIncludeDecl != null) ? pIncludeDecl : (pIncludeDecl = new IncludeDeclElements());
	}
	
	public ParserRule getIncludeDeclRule() {
		return getIncludeDeclAccess().getRule();
	}

	//InstGlobalProtocolDecl:
	//
	//	"global" "protocol" protocolName=ID LPA "role" roles+=ID (COMMA "role" roles+=ID)* RPA "instantiates"
	//
	//	instantiatedProtocol=ID SEMI;
	public InstGlobalProtocolDeclElements getInstGlobalProtocolDeclAccess() {
		return (pInstGlobalProtocolDecl != null) ? pInstGlobalProtocolDecl : (pInstGlobalProtocolDecl = new InstGlobalProtocolDeclElements());
	}
	
	public ParserRule getInstGlobalProtocolDeclRule() {
		return getInstGlobalProtocolDeclAccess().getRule();
	}

	//TypeDecl:
	//
	//	"import" typeName=ID "from" LT schema=ID GT file=ID ("as" alias=ID)? SEMI;
	public TypeDeclElements getTypeDeclAccess() {
		return (pTypeDecl != null) ? pTypeDecl : (pTypeDecl = new TypeDeclElements());
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//GlobalProtocolDecl:
	//
	//	"global" "protocol" protocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA ("role" roles+=ID
	//
	//	(COMMA "role" roles+=ID)*)? RPA body=GlobalInteractionBlock;
	public GlobalProtocolDeclElements getGlobalProtocolDeclAccess() {
		return (pGlobalProtocolDecl != null) ? pGlobalProtocolDecl : (pGlobalProtocolDecl = new GlobalProtocolDeclElements());
	}
	
	public ParserRule getGlobalProtocolDeclRule() {
		return getGlobalProtocolDeclAccess().getRule();
	}

	//GlobalInteractionBlock:
	//
	//	LCB interactionsequence+=GlobalInteraction+ RCB;
	public GlobalInteractionBlockElements getGlobalInteractionBlockAccess() {
		return (pGlobalInteractionBlock != null) ? pGlobalInteractionBlock : (pGlobalInteractionBlock = new GlobalInteractionBlockElements());
	}
	
	public ParserRule getGlobalInteractionBlockRule() {
		return getGlobalInteractionBlockAccess().getRule();
	}

	//GlobalInteraction:
	//
	//	Message | Choice | Parallel | Recursion | Continue | Interruptible | Do | Spawn;
	public GlobalInteractionElements getGlobalInteractionAccess() {
		return (pGlobalInteraction != null) ? pGlobalInteraction : (pGlobalInteraction = new GlobalInteractionElements());
	}
	
	public ParserRule getGlobalInteractionRule() {
		return getGlobalInteractionAccess().getRule();
	}

	//Spawn:
	//
	//	roleName=ID "spawns" targetProtocolName=ID (LT "sig" parameters+=ID (COMMA "sig" parameters+=ID)* GT)? LPA
	//
	//	currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI;
	public SpawnElements getSpawnAccess() {
		return (pSpawn != null) ? pSpawn : (pSpawn = new SpawnElements());
	}
	
	public ParserRule getSpawnRule() {
		return getSpawnAccess().getRule();
	}

	//Do:
	//
	//	"do" targetProtocolName=ID (LT arguments+=MessageSignature (COMMA arguments+=MessageSignature)* GT)? LPA
	//
	//	currentRoles+=ID "as" targetRoles+=ID (COMMA currentRoles+=ID "as" targetRoles+=ID)* RPA SEMI;
	public DoElements getDoAccess() {
		return (pDo != null) ? pDo : (pDo = new DoElements());
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}

	//Interruptible:
	//
	//	"interruptible" body=GlobalInteractionBlock "by" roleNames+=ID "with" signatures+=MessageSignature (COMMA "by"
	//
	//	roleNames+=ID "with" signatures+=MessageSignature)* //by role-name with message-signature  ( , by role-name with message-signature )* ;
	//
	//	SEMI;
	public InterruptibleElements getInterruptibleAccess() {
		return (pInterruptible != null) ? pInterruptible : (pInterruptible = new InterruptibleElements());
	}
	
	public ParserRule getInterruptibleRule() {
		return getInterruptibleAccess().getRule();
	}

	//Continue:
	//
	//	"continue" loopName=ID SEMI;
	public ContinueElements getContinueAccess() {
		return (pContinue != null) ? pContinue : (pContinue = new ContinueElements());
	}
	
	public ParserRule getContinueRule() {
		return getContinueAccess().getRule();
	}

	//Recursion:
	//
	//	"rec" loopName=ID body=GlobalInteractionBlock;
	public RecursionElements getRecursionAccess() {
		return (pRecursion != null) ? pRecursion : (pRecursion = new RecursionElements());
	}
	
	public ParserRule getRecursionRule() {
		return getRecursionAccess().getRule();
	}

	//Parallel:
	//
	//	"parallel" branches+=GlobalInteractionBlock ("and" branches+=GlobalInteractionBlock)*;
	public ParallelElements getParallelAccess() {
		return (pParallel != null) ? pParallel : (pParallel = new ParallelElements());
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Choice:
	//
	//	"choice" "at" role=ID branches+=GlobalInteractionBlock ("or" branches+=GlobalInteractionBlock)*;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//Message:
	//
	//	signature=MessageSignature "from" sender=ID "to" receiver=ID SEMI;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//MessageSignature:
	//
	//	operator=ID LPA (payloadTypes+=PayloadType (COMMA payloadTypes+=PayloadType)*)? RPA;
	public MessageSignatureElements getMessageSignatureAccess() {
		return (pMessageSignature != null) ? pMessageSignature : (pMessageSignature = new MessageSignatureElements());
	}
	
	public ParserRule getMessageSignatureRule() {
		return getMessageSignatureAccess().getRule();
	}

	//PayloadType:
	//
	//	payload=ID dataType=ID?;
	public PayloadTypeElements getPayloadTypeAccess() {
		return (pPayloadType != null) ? pPayloadType : (pPayloadType = new PayloadTypeElements());
	}
	
	public ParserRule getPayloadTypeRule() {
		return getPayloadTypeAccess().getRule();
	}

	//// Terminals aka punctuation tokens in lex
	//
	//terminal LCB:
	//
	//	"{";
	public TerminalRule getLCBRule() {
		return (tLCB != null) ? tLCB : (tLCB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCB"));
	} 

	//terminal RCB:
	//
	//	"}";
	public TerminalRule getRCBRule() {
		return (tRCB != null) ? tRCB : (tRCB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCB"));
	} 

	//terminal LPA:
	//
	//	"(";
	public TerminalRule getLPARule() {
		return (tLPA != null) ? tLPA : (tLPA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPA"));
	} 

	//terminal RPA:
	//
	//	")";
	public TerminalRule getRPARule() {
		return (tRPA != null) ? tRPA : (tRPA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPA"));
	} 

	//terminal SEMI:
	//
	//	";";
	public TerminalRule getSEMIRule() {
		return (tSEMI != null) ? tSEMI : (tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI"));
	} 

	//terminal COLON:
	//
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal COMMA:
	//
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal GT:
	//
	//	">";
	public TerminalRule getGTRule() {
		return (tGT != null) ? tGT : (tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GT"));
	} 

	//terminal LT:
	//
	//	"<";
	public TerminalRule getLTRule() {
		return (tLT != null) ? tLT : (tLT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LT"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
